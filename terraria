#!/bin/bash
## Terraria service script

## Vars
DEBUGGING=true
WRITE_DIR=/opt/terraria-service
PIDFILE="${WRITE_DIR}/server.pid"
LOGFILE="${WRITE_DIR}/log.txt"
ERRFILE="${WRITE_DIR}/err-log.txt"
CURRENT_USER=`whoami`
USERNAME=server #temporary

BINARY=/opt/terraria/tModLoaderServer
ARGS="-config serverconfig.txt"

INVOKE="${BINARY} ${ARGS}"


## Debugger
debug()
{
	echo "Debugger"
	echo -e "  USERNAME:\t${USERNAME}"
	echo -e "  CURRENT_USER:\t${CURRENT_USER}"
	echo -e "  WRITE_DIR:\t${WRITE_DIR}"
	echo -e "  PIDFILE:\t${PIDFILE}"
	echo -e "  LOGFILE:\t${LOGFILE}"
	echo -e "  ERRFILE:\t${ERRFILE}"
	echo
}
if $DEBUGGING; then
	debug
fi


## Usage display
usage()
{
	echo "Usage: $0 <COMMAND>"
	echo
	echo "Commands:"
	echo -e "  start\t\t Starts the server"
	echo -e "  stop\t\t Stops the server"
	echo -e "  kill\t\t Kills the server process"
	echo -e "  help\t\t Show this help message"
}


# Execute for User
## Helper function
## Executes the provided command
exec_user()
{
	if [ $CURRENT_USER == $USERNAME ]; then 		# Are you the terraria user?
		echo "Executing ${1}"
		bash -c "$1"
	elif [ "$(id -u)" == "0" ]; then			# Are you root?
		echo "Please do not run this as root!"
	else							# You are neither
		echo "Run this script as the $USERNAME user!"
		exit 1
	fi
}


# Start script
## Creates a new PID file
start()
{
	# Check if file exists
	if [ -f ${PIDFILE} ]; then
		echo "File already exists!"
		exit 1;
	fi

	# Create new PIDFILE
	if ! exec_user "touch ${PIDFILE}" ; then
		echo "Failed?"
		exit 1;
	fi

	# Create log
	if ! [ -f ${LOGFILE} ]; then
		echo "Log does not exist! Making a new one"
		if ! exec_user "touch ${LOGFILE}" ; then
			echo "Could not make a log file!"
			exit 1;
		fi
	fi

	# Create error log
	if ! [ -f ${ERRFILE} ]; then
		echo "Error log does not exist! Making a new one"
		if ! exec_user "touch ${ERRFILE}"; then
			echo "Could not make a error log file!"
			exit 1;
		fi
	fi
	
	# Attempt to start the process along with the PID into the PIDFILE
	# Invoke
	exec_user "${INVOKE} > ${LOGFILE} 2> ${ERRFILE} & echo \$! > ${PIDFILE}"
	echo "Started server!"

	exit 0
}


# Kill
## Kill the process
kill()
{
	echo "Killing server process.."
	exec_user "kill -TERM $(cat ${PIDFILE} 2> /dev/null) 2> /dev/null"
	exec_user "rm ${PIDFILE} 2> /dev/null"
}


## Routing
case "$1" in
	start)
		start
		;;
	stop)
		echo "Stopping the server.."
		echo "Could not stop the server (code not implemented)"
		;;
	help|--help|-h)
		usage
		;;
	kill)
		kill
		;;
	*)
		echo "Unknown command"
		usage
		exit 1
		;;
esac

exit 0
