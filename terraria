#!/bin/bash
## Terraria service script

## Vars
DEBUGGING=true
WRITE_DIR=/opt/terraria-service
PIDFILE="${WRITE_DIR}/server.pid"
ERRLOG="${WRITE_DIR}/errors.log"
CURRENT_USER=`whoami`
USERNAME=server

BINARY=/opt/terraria/tModLoaderServer
ARGS="-config serverconfig.txt"

INVOKE="${BINARY} ${ARGS}"

FIFO="${WRITE_DIR}/server.fifo"
if [ -z "${CMDOUT}" ]; then
	CMDOUT="${WRITE_DIR}/server.out"
fi



## Debugger
debug()
{
	echo "Debugger"
	echo -e "  USERNAME:\t${USERNAME}"
	echo -e "  CURRENT_USER:\t${CURRENT_USER}"
	echo -e "  WRITE_DIR:\t${WRITE_DIR}"
	echo -e "  PIDFILE:\t${PIDFILE}"
	echo -e "  ERRLOG:\t${ERRLOG}"
	echo -e "  LOG:\t${CMDOUT}"
	echo
}
if $DEBUGGING; then
	debug
fi


## Usage display
usage()
{
	echo "Usage: $0 <COMMAND>"
	echo
	echo "Commands:"
	echo -e "  start\t\t Starts the server"
	echo -e "  stop\t\t Stops the server"
	echo -e "  kill\t\t Kills the server process"
	echo -e "  help\t\t Show this help message"
}


# Execute for User
## Helper function
## Executes the provided command
## TODO: Propper user checks
exec_user()
{
	if [ $CURRENT_USER == $USERNAME ]; then 		# Are you the terraria user?
		echo "Executing: ${1}"
		bash -c "$1"
	elif [ "$(id -u)" == "0" ]; then			# Are you root?
		echo "Executing as ROOT: ${1}"
		su $USERNAME -s /bin/bash -c "$1"
	else							# You are neither
		echo "Run this script as the $USERNAME user!"
		exit 1
	fi
}


# Start script
## Creates a new PID file
start_service()
{
	# Check if file exists
	if [ -f ${PIDFILE} ]; then
		echo "File already exists!"
		return 1
	fi

	# Create new PIDFILE
	if ! exec_user "touch ${PIDFILE}" ; then
		echo "Could not create a new PID file"
		return 1
	fi

	# Create error log
	if ! [ -f ${ERRLOG} ]; then
		echo "Error log does not exist! Making a new one"
		if ! exec_user "touch ${ERRLOG}"; then
			echo "Could not make a error log file!"
			return 1;
		fi
	fi

	# FIFO file?
	if ! [ -f ${FIFO} ]; then
		exec_user "touch ${FIFO}"
	fi
	
	# Attempt to start the process along with the PID into the PIDFILE
	exec_user "tail -f ${FIFO} | ${INVOKE} >> ${CMDOUT} 2>&1 & echo \$! > ${PIDFILE}"

	# Check if online
	if [ "$?" -ne "0" ]; then
		echo "Unable to start ${SERVICE_NAME}"
		return 1
	else
		echo "Started ${SERVICE_NAME}, please see log for details"
	fi
}


# Stop script
## Stops the server
stop_service()
{
	echo "Stopping server.."
	terraria_command "exit"
}


# Kill service
## TODO: Check if service is running
kill_service()
{
	echo "Killing server process.."
	exec_user "kill -TERM $(cat ${PIDFILE} 2> /dev/null) 2> /dev/null"
	exec_user "rm ${PIDFILE} 2> /dev/null"
}


# Save game
## TODO: Check if server is running
save()
{
	echo "Saving game.."
	terraria_command "save"
}


# Execute server command
terraria_command()
{
	echo $1 >> ${FIFO}	# Send command to file
	sleep 1s
	> ${FIFO}		# Clear file
}


## Routing
case "$1" in
	start)
		if ! start_service; then
			echo "Could not start $SERVICE_NAME"
			exit 1
		else
			exit 0
		fi
		;;
	stop)
		stop_service
		;;
	save)
		save
		;;
	help|--help|-h)
		usage
		;;
	kill)
		kill_service
		;;
	*)
		echo "Unknown command"
		usage
		exit 1
		;;
esac

exit 0
